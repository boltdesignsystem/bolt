{% set schema = bolt.data.components["@bolt-components-toc"].schema %}

{% if enable_json_schema_validation %}
  {{ validate_data_schema(schema, _self) | raw }}
{% endif %}

{# Variables #}
{% set base_class = "c-bolt-toc-item" %}
{% set this = init(schema.properties.items.items) %}
{% set inner_attributes = create_attribute({}) %}

{# Array of classes based on the defined + default props #}
{% set classes = [
  base_class,
  active ? base_class ~ "--current",
] %}

{#
  Sort classes passed in via attributes into two groups:
  1. Those that should be applied to the inner tag (namely, "is-" and "has-" classes)
  2. Those that should be applied to the outer custom element (everything else EXCEPT c-bolt-* classes, which should never be passed in via attributes)
#}
{% set outer_classes = [] %}
{% set inner_classes = classes %}

{% for class in this.props['class'] %}
  {% if class starts with "is-" or class starts with "has-" %}
    {% set inner_classes = inner_classes|merge([class]) %}
  {% elseif class starts with "c-bolt-" == false %}
    {% set outer_classes = outer_classes|merge([class]) %}
  {% endif %}
{% endfor %}

{#
  Accessible attributes:
  1. role="presentation": declares that an element is being used only for presentation and therefore does not have any accessibility semantics. This is necessary for telling Firefox + NVDA to correctly announce the number of listitems in a list.
  2. role="listitem": declares that an element is a single item in a list.
  3. Aria lists reference: https://www.scottohara.me/blog/2018/05/26/aria-lists.html
#}
<bolt-toc-item
  {% if outer_classes %} class="{{ outer_classes|join(' ') }}" {% endif %}
  {{ this.props|without("text")|without("class") }}
  role="presentation"
>
  <div role="listitem">
    <a {% if inner_classes %} class="{{ inner_classes|join(' ') }}" {% endif %} href="{{ url }}">
      <ssr-keep for="bolt-toc-item">
        {{ text }}
      </ssr-keep>
    </a>
  </div>
</bolt-toc-item>
