// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Yeoman component generator JS file exist 1`] = `
"import { html, customElement, BoltElement, unsafeCSS } from '@bolt/element';
import classNames from 'classnames/bind';
import styles from './test.scss';
import schema from '../test.schema';

let cx = classNames.bind(styles);

@customElement('bolt-test')
class BoltTest extends BoltElement {
  static schema = schema;

  static get properties() {
    return {
      ...this.props,
    }
  }

  static get styles() {
    return [unsafeCSS(styles)];
  }

  render() {
    const classes = cx('c-bolt-test', {
      [\`c-bolt-test--disabled\`]: this.disabled,
    });

    return html\`
      <div class=\\"\${classes}\\">
        \${this.slotify('default')}
      </div>
    \`;
  }
}

export { BoltTest };
"
`;

exports[`Yeoman component generator SCSS file exist 1`] = `
"/* ------------------------------------ *\\\\
   Test
\\\\* ------------------------------------ */

@import '@bolt/core-v3.x';

// Register Custom Block Element
@include bolt-custom-element('bolt-test', block, medium);

/**
 * Long-form comment.
 *
 * This spans multiple lines and is also constrained to no longer than 80
 * characters in width.
 *
 * 1. Provide line-comments like this.
 */
.c-bolt-test {
  // Styles go here. /* [1] */
  display: block;
}
"
`;

exports[`Yeoman component generator folder structure of component package is correct 1`] = `
Array [
  "packages/generators/yeoman-create-component/generators/component/tmp/.boltrc.js",
  "packages/generators/yeoman-create-component/generators/component/tmp/docs-site/src/pages/pattern-lab/_patterns/40-components/test/00-test-docs.twig",
  "packages/generators/yeoman-create-component/generators/component/tmp/package.json",
  "packages/generators/yeoman-create-component/generators/component/tmp/packages/components/bolt-test/README.md",
  "packages/generators/yeoman-create-component/generators/component/tmp/packages/components/bolt-test/__tests__/test.js",
  "packages/generators/yeoman-create-component/generators/component/tmp/packages/components/bolt-test/index.js",
  "packages/generators/yeoman-create-component/generators/component/tmp/packages/components/bolt-test/index.scss",
  "packages/generators/yeoman-create-component/generators/component/tmp/packages/components/bolt-test/package.json",
  "packages/generators/yeoman-create-component/generators/component/tmp/packages/components/bolt-test/src/test.js",
  "packages/generators/yeoman-create-component/generators/component/tmp/packages/components/bolt-test/src/test.scss",
  "packages/generators/yeoman-create-component/generators/component/tmp/packages/components/bolt-test/src/test.twig",
  "packages/generators/yeoman-create-component/generators/component/tmp/packages/components/bolt-test/test.schema.js",
]
`;

exports[`Yeoman component generator index JS file exist 1`] = `
"import './src/test';
"
`;

exports[`Yeoman component generator index SCSS file exist 1`] = `
"@import 'src/test.scss';
"
`;

exports[`Yeoman component generator package.json file exist 1`] = `
"{
  \\"name\\": \\"@bolt/components-test\\",
  \\"version\\": \\"0.0.0\\",
  \\"description\\": \\"Test Description\\",
  \\"keywords\\": [
    \\"bolt design system\\"
  ],
  \\"bugs\\": {
    \\"url\\": \\"https://github.com/bolt-design-system/bolt/issues\\"
  },
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"git+https://github.com/bolt-design-system/bolt/tree/master/packages/components/bolt-test\\"
  },
  \\"license\\": \\"MIT\\",
  \\"author\\": \\"Test User <test@example.org>\\",
  \\"main\\": \\"index.js\\",
  \\"style\\": \\"index.scss\\",
  \\"dependencies\\": {
    \\"@bolt/core-v3.x\\": \\"^0.0.0\\"
  },
  \\"publishConfig\\": {
    \\"access\\": \\"public\\"
  },
  \\"schema\\": \\"test.schema.js\\",
  \\"twig\\": \\"src/test.twig\\"
}
"
`;

exports[`Yeoman component generator pattern lab file exist 1`] = `
"{% set usage %}{% verbatim %}
{% include '@bolt-components-test/test.twig' only %}
{% endverbatim %}{% endset %}

{% include \\"@utils/docs.twig\\" with {
  componentName: \\"test\\",
  usage: usage
} only %}
"
`;

exports[`Yeoman component generator readme file exist 1`] = `
"Test Description

###### Install via NPM

\`\`\`
npm install @bolt/components-test
\`\`\`
"
`;

exports[`Yeoman component generator schema file exist 1`] = `
"module.exports = {
  $schema: 'http://json-schema.org/draft-04/schema#',
  title: 'Test',
  type: 'object',
  properties: {
    attributes: {
      type: 'object',
      description:
        'A Drupal attributes object. Applies extra HTML attributes to the &lt;bolt-test&gt; tag.',
    },
    disabled: {
      type: 'boolean',
      description:
        'Default \`disabled\` prop supported globally by most Bolt components.',
      default: false,
    },
  },
};
"
`;

exports[`Yeoman component generator tests file exist 1`] = `
"import {
  isConnected,
  render,
  renderString,
  stopServer,
  html,
  vrtDefaultConfig,
} from '../../../testing/testing-helpers';
import schema from '../test.schema';
const { disabled } = schema.properties;
const timeout = 90000;

describe('Test', () => {
  let page;

  afterAll(async () => {
    await stopServer();
    await page.close();
  });

  beforeEach(async () => {
    await page.evaluate(() => {
      document.body.innerHTML = '';
    });
  }, timeout);

  beforeAll(async () => {
    page = await global.__BROWSER__.newPage();
    await page.goto('http://127.0.0.1:4444/', {
      timeout: 0,
    });
  }, timeout);

  test('basic usage', async () => {
    const results = await render(
      '@bolt-components-test/test.twig',
    );
    expect(results.ok).toBe(true);
    expect(results.html).toMatchSnapshot();
  });

  test('adds class via Drupal Attributes', async () => {
    const results = await render(
      '@bolt-components-test/test.twig',
      {
        attributes: {
          class: ['u-bolt-margin-top-medium'],
        },
      },
    );
    expect(results.ok).toBe(true);
    expect(results.html).toMatchSnapshot();
  });

  test('renders with Shadow DOM', async function() {
    const shadowRoot = await page.evaluate(async () => {
      document.body.insertAdjacentHTML(
        'beforeend',
        '<bolt-test>Test test</bolt-test>',
      );
      const el = document.querySelector('bolt-test');
      await el.updateComplete;
      return el.renderRoot.innerHTML;
    });

    const outerHTML = await page.evaluate(async () => {
      const el = document.querySelector('bolt-test');
      await el.updateComplete;
      return el.outerHTML;
    });

    const renderedShadowDomHTML = await html(shadowRoot);
    expect(renderedShadowDomHTML).toMatchSnapshot();

    const renderedHTML = await html(outerHTML);
    expect(renderedHTML).toMatchSnapshot();
  });

  test('renders without Shadow DOM', async function() {
    const outerHTML = await page.evaluate(async () => {
      document.body.insertAdjacentHTML(
        'beforeend',
        '<bolt-test no-shadow>Test test</bolt-test>',
      );
      const el = document.querySelector('bolt-test');
      await el.updateComplete;
      return el.outerHTML;
    });

    const renderedHTML = await html(outerHTML);
    expect(renderedHTML).toMatchSnapshot();
  });

  test(\`sets 'disabled' prop\`, async () => {
    const results = await render(
      '@bolt-components-test/test.twig',
      {
        disabled: true,
      },
    );
    expect(results.ok).toBe(true);
    expect(results.html).toMatchSnapshot();
  });
});
"
`;
