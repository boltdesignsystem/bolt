// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Bolt component generator JS file exist 1`] = `
"import { html, customElement, BoltElement, unsafeCSS } from '@bolt/element';
import classNames from 'classnames/bind';
import styles from './test.scss';
import schema from '../test.schema';

let cx = classNames.bind(styles);

@customElement('bolt-test')
class BoltTest extends BoltElement {
  static schema = schema;

  static get properties() {
    return {
      ...this.props,
    };
  }

  static get styles() {
    return [unsafeCSS(styles)];
  }

  render() {
    const classes = cx('c-bolt-test', {
      [\`c-bolt-test--disabled\`]: this.disabled,
    });

    return html\`
      <div class=\\"\${classes}\\">
        \${this.slotify('default')}
      </div>
    \`;
  }
}

export { BoltTest };
"
`;

exports[`Bolt component generator SCSS file exist 1`] = `
"/* ------------------------------------ *\\\\
   Test
\\\\* ------------------------------------ */

@import '@bolt/core-v3.x';

// Register Custom Block Element
@include bolt-custom-element('bolt-test', block, medium);

/**
 * Long-form comment.
 *
 * This spans multiple lines and is also constrained to no longer than 80
 * characters in width.
 *
 * 1. Provide line-comments like this.
 */
.c-bolt-test {
  // Styles go here. /* [1] */
  display: block;
}
"
`;

exports[`Bolt component generator folder structure of component package is correct 1`] = `
Array [
  "packages/generators/tmp/.boltrc.js",
  "packages/generators/tmp/docs-site/src/pages/pattern-lab/_patterns/40-components/test/00-test-docs.twig",
  "packages/generators/tmp/package.json",
  "packages/generators/tmp/packages/components/bolt-test/README.md",
  "packages/generators/tmp/packages/components/bolt-test/__tests__/test.js",
  "packages/generators/tmp/packages/components/bolt-test/index.js",
  "packages/generators/tmp/packages/components/bolt-test/index.scss",
  "packages/generators/tmp/packages/components/bolt-test/package.json",
  "packages/generators/tmp/packages/components/bolt-test/src/test.js",
  "packages/generators/tmp/packages/components/bolt-test/src/test.scss",
  "packages/generators/tmp/packages/components/bolt-test/src/test.twig",
  "packages/generators/tmp/packages/components/bolt-test/test.schema.js",
]
`;

exports[`Bolt component generator index JS file exist 1`] = `
"import './src/test';
"
`;

exports[`Bolt component generator index SCSS file exist 1`] = `
"@import 'src/test.scss';
"
`;

exports[`Bolt component generator package.json file exist 1`] = `
"{
  \\"name\\": \\"@bolt/components-test\\",
  \\"version\\": \\"0.0.0\\",
  \\"description\\": \\"Test description\\",
  \\"keywords\\": [
    \\"bolt design system\\"
  ],
  \\"homepage\\": \\"https://boltdesignsystem.com\\",
  \\"bugs\\": {
    \\"url\\": \\"https://github.com/bolt-design-system/bolt/issues\\"
  },
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://github.com/bolt-design-system/bolt/tree/master/packages/components/bolt-test\\"
  },
  \\"license\\": \\"MIT\\",
  \\"author\\": \\"Test User <test@example.org>\\",
  \\"main\\": \\"index.js\\",
  \\"style\\": \\"index.scss\\",
  \\"dependencies\\": {
    \\"@bolt/core-v3.x\\": \\"^0.0.0\\"
  },
  \\"publishConfig\\": {
    \\"access\\": \\"public\\"
  },
  \\"schema\\": \\"test.schema.js\\",
  \\"twig\\": \\"src/test.twig\\"
}
"
`;

exports[`Bolt component generator pattern lab file exist 1`] = `
"{% set usage %}{% verbatim %}
{% include '@bolt-components-test/test.twig' only %}
{% endverbatim %}{% endset %}

{% include '@utils/docs.twig' with {
  componentName: 'test',
  usage: usage
} only %}
"
`;

exports[`Bolt component generator readme file exist 1`] = `
"Test description

###### Install via NPM

\`\`\`
npm install @bolt/components-test
\`\`\`
"
`;

exports[`Bolt component generator schema file exist 1`] = `
"module.exports = {
  $schema: 'http://json-schema.org/draft-04/schema#',
  title: 'Test',
  type: 'object',
  properties: {
    attributes: {
      type: 'object',
      description:
        'A Drupal attributes object. Applies extra HTML attributes to the &lt;bolt-test&gt; tag.',
    },
    title: {
      type: 'any',
      description: 'Title of Example.',
    },
    content: {
      type: 'any',
      description: 'The main Example content.',
    },
    disabled: {
      type: 'boolean',
      description:
        'Default \`disabled\` prop supported globally by most Bolt components.',
      default: false,
    },
  },
};
"
`;

exports[`Bolt component generator tests file exist 1`] = `
"// Refer to https://github.com/boltdesignsystem/bolt/wiki/Jest-Test:-Example-Jest-Test for more testing examples
import { render, renderWC, stopServer } from '../../../testing/testing-helpers';
import schema from '../test.schema';
const componentSelector = 'bolt-test';
// const { [PROP KEY], [PROP KEY]... } = schema.properties;
let page, fixtures;

afterAll(async () => {
  await stopServer();
  await page.close();
});

beforeEach(async () => {
  await page.evaluate(() => {
    document.body.innerHTML = '';
  });
});

beforeAll(async () => {
  page = await global.__BROWSER__.newPage();
  await page.goto('http://127.0.0.1:4444/', {
    timeout: 0,
  });

  const defaultData = {
    content: 'This is a test',
  };

  fixtures = {
    defaultData,
  };
});

describe('Bolt Test component', () => {
  test('default', async () => {
    const results = await render(
      '@bolt-components-test/test.twig',
      {
        ...fixtures.defaultData,
      },
    );

    /*
      Comment out if testing a Web Component
    */
    // const { innerHTML, outerHTML } = await renderWC(
    //   componentSelector,
    //   results.html,
    //   page
    // );

    expect(results.ok).toBe(true);
    expect(results.html).toMatchSnapshot();

    /*
      Comment out if testing a Web Component
    */
    // await expect(innerHTML).toMatchSnapshot();
    // await expect(outerHTML).toMatchSnapshot();
  });
});

/*
  Uncomment and follow a pattern below if your schema has
  enum to go thru. Do not forget to uncomment the consts
  at the very top of this file.
*/
// describe('Bolt Test prop - , () => {
//   // Target each of the schema keys with the following pattern
//   [PROP KEY].enum.forEach(async (option) => {
//     test(\`[PROP KEY] items: \${option}\`, async () => {
//       const results = await render(
//         '@bolt-components-test/test.twig',
//         {
//           ...fixtures.defaultData,
//           [PROP KEY]: option,
//         }
//       );

//       await expect(results.ok).toBe(true);
//       await expect(results.html).toMatchSnapshot();
//     });
//   });
// });
"
`;
