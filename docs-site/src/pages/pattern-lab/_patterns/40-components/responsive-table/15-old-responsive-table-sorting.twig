{% set description %}
    Sorting.
{% endset %}

{% set notes %}
  <bolt-ol>
    <bolt-li>List out important information about this component and its usage.</bolt-li>
  </bolt-ol>
{% endset %}
{% set inline_image %}
  {% include '@bolt-elements-image/image.twig' with {
    attributes: {
      src: '/images/placeholders/tout-4x3-climber.jpg',
      alt: 'A Rock Climber',
      loading: 'lazy'
    }
  } only %}
{% endset %}
{% set demo %}
  {% include '@bolt-components-responsive-table/responsive-table.twig' with {
    table_caption_top: 'table header top',
    sort: true,
    filters: true,
    table_headers_top: [
      {
        cells: [
          'top-1 header',
          'top-2 header',
          {
            content: 'top-3 header',
          },
          'top-4 header',
          {
            content: 'top-5 header',
          },
        ]
      },
    ],
    rows: [
      {
        cells: [
          'Row 1 Column 1',
          'Row 1 Column 2',
          'A',
          'Row 1 Column 4',
          '50',
        ]
      },
      {
        cells: [
          'Row 2 Column 1',
          'Row 2 Column 2',
          'C',
          'Row 2 Column 4',
          '100',
        ]
      },
      {
        cells: [
          'Row 3 Column 1',
          'Row 3 Column 2',
          'B',
          'Row 3 Column 4',
          '10',
        ]
      },
    ],
    footer: {
      cells: [
        'Footer Row 1 Column 1',
        'Footer Row 1 Column 2',
        'Footer Row 1 Column 3',
        'Footer Row 1 Column 4',
        'Footer Row 1 Column 5',
      ]
    },
  } only %}
{% endset %}

{% set twig_markup %}{% verbatim %}
{% include '@bolt-components-responsive-table/responsive-table.twig' with {
  table_caption_top: 'table header top',
  sort: true,
  filters: true,
  table_headers_top: [
    {
      cells: [
        'top-1 header',
        'top-2 header',
        {
          content: 'top-3 header',
        },
        'top-4 header',
        {
          content: 'top-5 header',
        },
      ]
    },
  ],
  rows: [
    {
      cells: [
        'Row 1 Column 1',
        'Row 1 Column 2',
        'A',
        'Row 1 Column 4',
        '50',
      ]
    },
    {
      cells: [
        'Row 2 Column 1',
        'Row 2 Column 2',
        'C',
        'Row 2 Column 4',
        '100',
      ]
    },
    {
      cells: [
        'Row 3 Column 1',
        'Row 3 Column 2',
        'B',
        'Row 3 Column 4',
        '10',
      ]
    },
  ],
  footer: {
    cells: [
      'Footer Row 1 Column 1',
      'Footer Row 1 Column 2',
      'Footer Row 1 Column 3',
      'Footer Row 1 Column 4',
      'Footer Row 1 Column 5',
    ]
  },
} only %}
{% endverbatim %}{% endset %}

{% set html_markup %}{% verbatim %}
<div class="c-bolt-responsive-table">
  This is a responsive-table component.
</div>
{% endverbatim %}{% endset %}

{% include '@utils/pattern-doc-page.twig' with {
  title: 'Sorting',
  description: description,
  notes: notes,
  demo: demo,
  twig_markup: twig_markup,
  html_markup: html_markup
} only %}

{# JS drafts #}
<script src="//cdnjs.cloudflare.com/ajax/libs/list.js/1.5.0/list.min.js"></script>

<script>

    var tableHeaders = document.querySelectorAll('.c-bolt-responsive-table__head .c-bolt-responsive-table__header')
    var table = document.querySelector('.c-bolt-responsive-table__table');
    const sortingClassesArr=[];
    for(var i=0;i<tableHeaders.length;i++){
      sortingClassesArr.push(`c-bolt-responsive-table--sort-${tableHeaders[i].innerText}`.replace(/^\s+|\s+$/gm,'').replace(/\s/g, '-'));
    }

    var options = {
      sortClass: 'c-bolt-responsive-table__button--sort',
      listClass: 'c-bolt-responsive-table__body',
      valueNames: sortingClassesArr,
    };

    var table = document.querySelectorAll('.c-bolt-responsive-table__table');
    table.forEach(el => {
      var tableID = new List(el.id, options)
    })

      function toggleFilters() {
    const filtersButton = document.querySelectorAll(
      '.c-bolt-responsive-table__button--filter',
    );

    const resetButton = document.querySelectorAll(
      '.c-bolt-responsive-table__filters-reset',
    );

    const filters = document.querySelectorAll(
      '.c-bolt-responsive-table__filters',
    );

    filters.forEach(el => {
      const checkboxes = el.querySelectorAll(
        '.c-bolt-responsive-table__filters-checkbox',
      );

      checkboxes.forEach(el => {
        el.addEventListener('click', () => {
          let allUnchecked = [...checkboxes].every(e => !e.checked);
          el.closest('.c-bolt-responsive-table__filters')
            .querySelector('.c-bolt-responsive-table__filters-reset')
            .classList.add('c-bolt-responsive-table__filters-reset--visible');

          if (allUnchecked) {
            el.closest('.c-bolt-responsive-table__filters')
              .querySelector('.c-bolt-responsive-table__filters-reset')
              .classList.remove(
                'c-bolt-responsive-table__filters-reset--visible',
              );
          }
        });
      });
    });

    filtersButton.forEach(el => {
      el.addEventListener('click', () => {
        el.parentElement.nextElementSibling.classList.toggle(
          'c-bolt-responsive-table__filters--visible',
        );
        if (el.getAttribute('aria-expanded') === 'true') {
          el.setAttribute('aria-expanded', 'false');
        } else {
          el.setAttribute('aria-expanded', 'true');
        }
      });
    });

    if (resetButton) {
      resetButton.forEach(el => {
        el.addEventListener('click', e => {
          e.target.classList.remove(
            'c-bolt-responsive-table__filters-reset--visible',
          );
          el.parentElement
            .querySelectorAll('.c-bolt-responsive-table__filters-checkbox')
            .forEach(el => {
              if (el.checked) {
                el.checked = false;
              }
            });
          el.parentElement.classList.remove(
            'c-bolt-responsive-table__filters--visible',
          );
        });
      });
    }
  }
  toggleFilters();

</script>
